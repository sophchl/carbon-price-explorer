mutate_fun = to_period,
period = my_period,
k = my_k)
}
return(data_new)
}
plot_descriptives_return <- function(data_stock, mean_type, my_period) {
# my_period: one of "daily", "quarterly", "5-year"
data_plot <- data_prepare(data_stock, adjusted, "return", mean_type, my_period) %>%
rename("my_returns" = 2)
ggplot(data_plot, aes(x = date, y = my_returns)) +
geom_line(color = "#8c8c8c") + #"#1B9E77"
ylab("DJIA return") +
theme_classic()
}
plot_descriptives_return(djia, "log", "quarterly")
plot_descriptives_return(djia, "log", "daily")
plot_descriptives_return(djia, "log", "5-year")
my_regression_growth <- function(data_djia, data_gdp, my_period, remove_outlier) {
# plots a regression line and regression summary for the growth data (gdp growth and djia return)
# input: djia and gdp raw data, the period to aggregate the date to (one of "quarterly" or "5-year")
# output: list of [1] regre ssion plot, [2] regression summary
data_djia <- data_prepare(data_djia, adjusted, "return", "log", my_period) %>%
rename("return" = 2)
data_gdp <- data_prepare(data_gdp, price, "return", "log", my_period) %>%
rename("growth" = 2)
if(my_period == "quarterly"){
data_plot <- right_join(data_djia, data_gdp, by = "date") %>%
slice(-1)
}
if(my_period == "5-year"){
data_plot <- right_join(data_djia, data_gdp, by = "year") %>%
slice(-1)
}
# EDIT
if(remove_outlier == TRUE){
data_gdp <- data_gdp %>%
filter(growth <= 0.05 & growth >= -0.05)
}
reg_plot <- ggplot(data_plot, aes(x = growth, y = return)) +
geom_smooth(method = "lm", formula = "y ~ x") +
geom_point(color = "#8c8c8c") +
xlab("GDP growth") + ylab("DJIA return") +
theme_classic()
reg_model <- lm(return ~ growth, data = data_plot) %>%
summary()
return(list(reg_plot, reg_model))
}
my_regression_growth(djia, gdp, "quarterly", "no")
data_djia <- djia
data_gdp <- gdp
my_period = "quarterly"
remove_outlier = FALSE
data_djia <- data_prepare(data_djia, adjusted, "return", "log", my_period) %>%
rename("return" = 2)
data_gdp <- data_prepare(data_gdp, price, "return", "log", my_period) %>%
rename("growth" = 2)
data_djia
data_gdp
if(my_period == "quarterly"){
data_plot <- right_join(data_djia, data_gdp, by = "date") %>%
slice(-1)
}
if(my_period == "5-year"){
data_plot <- right_join(data_djia, data_gdp, by = "year") %>%
slice(-1)
}
data_plot
reg_plot <- ggplot(data_plot, aes(x = growth, y = return)) +
geom_smooth(method = "lm", formula = "y ~ x") +
geom_point(color = "#8c8c8c") +
xlab("GDP growth") + ylab("DJIA return") +
theme_classic()
reg_plot
data_djia <- djia
data_gpd <- gdp
data_djia <- data_prepare(data_djia, adjusted, "return", "log", my_period) %>%
rename("return" = 2)
data_gdp <- data_prepare(data_gdp, price, "return", "log", my_period) %>%
rename("growth" = 2)
if(my_period == "quarterly"){
data_gdp <- data_gdp %>%
mutate(date = as.yearqtr(date))
data_djia <- data_djia %>%
mutate(date = as.yearqtr(date))
data_plot <- right_join(data_djia, data_gdp, by = "date") %>%
slice(-1)
}
data_djia <- djia
data_gdp <- gdp
data_djia <- data_prepare(data_djia, adjusted, "return", "log", my_period) %>%
rename("return" = 2)
data_gdp <- data_prepare(data_gdp, price, "return", "log", my_period) %>%
rename("growth" = 2)
if(my_period == "quarterly"){
data_gdp <- data_gdp %>%
mutate(date = as.yearqtr(date))
data_djia <- data_djia %>%
mutate(date = as.yearqtr(date))
data_plot <- right_join(data_djia, data_gdp, by = "date") %>%
slice(-1)
}
data_plot
reg_plot <- ggplot(data_plot, aes(x = growth, y = return)) +
geom_smooth(method = "lm", formula = "y ~ x") +
geom_point(color = "#8c8c8c") +
xlab("GDP growth") + ylab("DJIA return") +
theme_classic()
reg_model <- lm(return ~ growth, data = data_plot) %>%
summary()
reg_plot
reg_model
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
rm(list = ls())
runApp('carbon_app')
?data_prepare
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
runApp('carbon_app')
djia <- tq_get("DJIA", get = "stock.prices", from = "1930-01-01")
data <- djia
return_period = "daily"
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
data
volatility(data$adjusted[c(0:5)])
volatility(data$adjusted[c(0:5)], n = 5)
volatility(data$adjusted)
volatility(data$adjusted, n = 5)
volatility(data$adjusted[c(0:5)], n = 5) %>% tail(1)
# calculate volatility over different aggregation periods without averaging
my_vola_fun2 <- function(data, time_frame, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
my_vola_fun2(djia, c(5:50), "daily")
my_vola_fun2(djia, c(5:50), "5-year")
data = djia
return_period = "5-year"
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
data
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
time_frame = c(5:50)
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
data %>% filter(is.na(adjusted))
i = 1
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
return_vola
i = 2
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
return_vola
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
i = 50
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
time_frame = c(0:18)
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
data <- djia
time_frame = c(5:15)
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
vola_data
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
data = djia
return_period = "daily"
if (return_period = "daily") {
my_factor <- 250
} else if (return_period = "quarterly") {
my_factor <- 4
} else if (return_period = "5-year") {
my_factor <- 1/5
}
if (return_period = "daily") {
my_factor <- 250
} else if (return_period = "quarterly") {
my_factor <- 4
} else if (return_period = "5-year") {
my_factor <- 1/5
}
if (return_period == "daily") {
my_factor <- 250
} else if (return_period == "quarterly") {
my_factor <- 4
} else if (return_period == "5-year") {
my_factor <- 1/5
}
my_factor
data_plot <- data %>%
my_vola_fun2(time_frame, return_period) %>%
mutate("horizon" = period * my_factor)
data_plot
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
if (return_period == "daily") {
my_factor <- 1/250
} else if (return_period == "quarterly") {
my_factor <- 1/4
} else if (return_period == "5-year") {
my_factor <- 5
}
data_plot <- data %>%
my_vola_fun2(time_frame, return_period) %>%
mutate("horizon" = period * my_factor)
data_plot
time_frame = c(0:50)
time_frame = c(5:500)
data_plot <- data %>%
my_vola_fun2(time_frame, return_period) %>%
mutate("horizon" = period * my_factor)
data_plot
ggplot(data_plot, aes(x = horizon, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot$djia_vola), max(data_plot$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
theme_classic()
data_plot %>% tail()
ggplot(data_plot, aes(x = horizon, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
ylab("sd DJIA returns") +
theme_classic()
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
data <- djia
data
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
return_period <- "5-year"
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
data
my_vola_fun2 <- function(data, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
time_frame <- c(5:nrow(data) -1 )
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
my_vola_fun2(djia, "daily")
10*250
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
if (return_period == "daily") {
my_factor <- 1/250
} else if (return_period == "quarterly") {
my_factor <- 1/4
} else if (return_period == "5-year") {
my_factor <- 5
}
time_frame <- c(5:10*factor)
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
data <- djia
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
if (return_period == "daily") {
my_factor <- 1/250
} else if (return_period == "quarterly") {
my_factor <- 1/4
} else if (return_period == "5-year") {
my_factor <- 5
}
time_frame <- c(5:(10*factor))
time_frame
time_frame <- c(5:(10*my_factor))
time_frame
return_period
time_frame <- c(5:(10/my_factor))
time_frame
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
if (return_period == "daily") {
my_factor <- 1/250
time_frame <- c(5:300)
} else if (return_period == "quarterly") {
my_factor <- 1/4
time_frame <- c(5:nrow(data)-1)
} else if (return_period == "5-year") {
my_factor <- 5
time_frame <- c(5:nrow(data)-1)
}
data <- djia
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
if (return_period == "daily") {
my_factor <- 1/250
time_frame <- c(5:300)
} else if (return_period == "quarterly") {
my_factor <- 1/4
time_frame <- c(5:nrow(data)-1)
} else if (return_period == "5-year") {
my_factor <- 5
time_frame <- c(5:nrow(data)-1)
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return_period
vola_data
my_vola_fun2 <- function(data, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
if (return_period == "daily") {
my_factor <- 1/250
time_frame <- c(5:300)
} else if (return_period == "quarterly") {
my_factor <- 1/4
time_frame <- c(5:nrow(data)-1)
} else if (return_period == "5-year") {
my_factor <- 5
time_frame <- c(5:nrow(data)-1)
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
plot_djia_volatility2 <- function(data, time_frame, return_period) {
if (return_period == "daily") {
my_factor <- 1/250
} else if (return_period == "quarterly") {
my_factor <- 1/4
} else if (return_period == "5-year") {
my_factor <- 5
}
data_plot <- data %>%
my_vola_fun2(time_frame, return_period) %>%
mutate("horizon" = period * my_factor)
ggplot(data_plot, aes(x = horizon, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
ylab("sd DJIA returns") +
xlab("time horizon in years")
theme_classic()
}
plot_djia_volatility2 <- function(data, return_period) {
if (return_period == "daily") {
my_factor <- 1/250
} else if (return_period == "quarterly") {
my_factor <- 1/4
} else if (return_period == "5-year") {
my_factor <- 5
}
data_plot <- data %>%
my_vola_fun2(return_period) %>%
mutate("horizon" = period * my_factor)
ggplot(data_plot, aes(x = horizon, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
ylab("sd DJIA returns") +
xlab("time horizon in years")
theme_classic()
}
plot_djia_volatility(djia, "5-year")
my_vola_fun2 <- function(data, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
data <- data_prepare(data, adjusted, "absolute", "whatever", return_period) %>%
drop_na()
if (return_period == "daily") {
my_factor <- 1/250
time_frame <- c(5:300)
} else if (return_period == "quarterly") {
my_factor <- 1/4
time_frame <- c(5:nrow(data)-1)
} else if (return_period == "5-year") {
my_factor <- 5
time_frame <- c(5:nrow(data)-1)
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data$adjusted[c(0:time_frame[i])], n = time_frame[i], calc = "close") %>%
tail(1)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
plot_djia_volatility2 <- function(data, return_period) {
if (return_period == "daily") {
my_factor <- 1/250
} else if (return_period == "quarterly") {
my_factor <- 1/4
} else if (return_period == "5-year") {
my_factor <- 5
}
data_plot <- data %>%
my_vola_fun2(return_period) %>%
mutate("horizon" = period * my_factor)
ggplot(data_plot, aes(x = horizon, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
ylab("sd DJIA returns") +
xlab("time horizon in years")
theme_classic()
}
plot_djia_volaility2(djia, "daily")
plot_djia_volatility2(djia, "daily")
return_period
data <- djia
if (return_period == "daily") {
my_factor <- 1/250
} else if (return_period == "quarterly") {
my_factor <- 1/4
} else if (return_period == "5-year") {
my_factor <- 5
}
data_plot <- data %>%
my_vola_fun2(return_period) %>%
mutate("horizon" = period * my_factor)
data_plot
theme_classic()
ggplot(data_plot, aes(x = horizon, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
ylab("sd DJIA returns") +
xlab("time horizon in years") +
theme_classic()
plot_djia_volatility2 <- function(data, return_period) {
if (return_period == "daily") {
my_factor <- 1/250
} else if (return_period == "quarterly") {
my_factor <- 1/4
} else if (return_period == "5-year") {
my_factor <- 5
}
data_plot <- data %>%
my_vola_fun2(return_period) %>%
mutate("horizon" = period * my_factor)
ggplot(data_plot, aes(x = horizon, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
ylab("sd DJIA returns") +
xlab("time horizon in years") +
theme_classic()
}
plot_djia_volatility2(djia, "5-year")
plot_djia_volatility2(djia, "quarterly")
plot_djia_volatility2(djia, "daily")
source('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R')
runApp('carbon_app')
