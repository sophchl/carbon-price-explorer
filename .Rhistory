fill = "yellow", color = "yellow", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
theme_classic()
}
plot_djia_volatility_separate(djia, gdp, 0.5, c(5:20), "daily")
# careful: quite slow
plot_djia_volatility_separate <- function(data_djia, data_gdp, selected_quantile, time_frame, return_period) {
# calculate GDP quantiles
gdp_quantiles <- quantile_analysis(data_gdp) %>%
rename(gdp_quantile = "GDP loss", for_quantile = "p-quantile")
# find quarters with GDP losses lower than selected quantile
gdp_drops <- data_gdp %>%
tq_mutate(select = price, mutate_fun = quarterlyReturn) %>%
filter(quarterly.returns <= gdp_quantiles %>%
filter(for_quantile == selected_quantile) %>%
pull(gdp_quantile)) %>%
mutate(year_quarter = as.yearqtr(date))
# create two separate dataframes for loss and non-loss quarters
filter_function <- function(data_djia, gdp_drops, boolean_in_loss){
data_djia <- data_djia %>%
mutate(in_loss = as.yearqtr(date) %in% gdp_drops$year_quarter) %>%
filter(in_loss == boolean_in_loss) %>%
group_by(as.yearqtr(date)) %>%
filter(n() > 50) %>%
do(quarter_vola = my_vola_fun(., time_frame, return_period)) %>%
unnest(quarter_vola) %>%
group_by(period) %>%
summarize(djia_vola = mean(djia_vola))
return(data_djia)
}
data_plot_loss <- filter_function(data_djia, gdp_drops, TRUE)
data_plot_no_loss <- filter_function(data_djia, gdp_drops, FALSE)
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, fill = djia_vola, y = djia_vola),
fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5,
aes(x = period, fill = djia_vola, y = djia_vola)) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
theme_classic()
}
plot_djia_volatility_separate(djia, gdp, 0.5, c(5:20), "daily")
# careful: quite slow
plot_djia_volatility_separate <- function(data_djia, data_gdp, selected_quantile, time_frame, return_period) {
# calculate GDP quantiles
gdp_quantiles <- quantile_analysis(data_gdp) %>%
rename(gdp_quantile = "GDP loss", for_quantile = "p-quantile")
# find quarters with GDP losses lower than selected quantile
gdp_drops <- data_gdp %>%
tq_mutate(select = price, mutate_fun = quarterlyReturn) %>%
filter(quarterly.returns <= gdp_quantiles %>%
filter(for_quantile == selected_quantile) %>%
pull(gdp_quantile)) %>%
mutate(year_quarter = as.yearqtr(date))
# create two separate dataframes for loss and non-loss quarters
filter_function <- function(data_djia, gdp_drops, boolean_in_loss){
data_djia <- data_djia %>%
mutate(in_loss = as.yearqtr(date) %in% gdp_drops$year_quarter) %>%
filter(in_loss == boolean_in_loss) %>%
group_by(as.yearqtr(date)) %>%
filter(n() > 50) %>%
do(quarter_vola = my_vola_fun(., time_frame, return_period)) %>%
unnest(quarter_vola) %>%
group_by(period) %>%
summarize(djia_vola = mean(djia_vola))
return(data_djia)
}
data_plot_loss <- filter_function(data_djia, gdp_drops, TRUE)
data_plot_no_loss <- filter_function(data_djia, gdp_drops, FALSE)
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, fill = djia_vola, y = djia_vola),
fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5,
aes(x = period, fill = djia_vola, y = djia_vola)) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
guides(colour = guide_legend(override.aes = list(pch = c("in loss period", "not in loss period"), fill = c("yellow", "#8DD3C7"))))
theme_classic()
}
plot_djia_volatility_separate(djia, gdp, 0.5, c(5:20), "daily")
# careful: quite slow
data_djia <- djia
data_gdp <- gdp
selected_quantile <- 0.5
time_frame <- c(5:20)
return_period <- "daily"
# calculate GDP quantiles
gdp_quantiles <- quantile_analysis(data_gdp) %>%
rename(gdp_quantile = "GDP loss", for_quantile = "p-quantile")
# find quarters with GDP losses lower than selected quantile
gdp_drops <- data_gdp %>%
tq_mutate(select = price, mutate_fun = quarterlyReturn) %>%
filter(quarterly.returns <= gdp_quantiles %>%
filter(for_quantile == selected_quantile) %>%
pull(gdp_quantile)) %>%
mutate(year_quarter = as.yearqtr(date))
# create two separate dataframes for loss and non-loss quarters
filter_function <- function(data_djia, gdp_drops, boolean_in_loss){
data_djia <- data_djia %>%
mutate(in_loss = as.yearqtr(date) %in% gdp_drops$year_quarter) %>%
filter(in_loss == boolean_in_loss) %>%
group_by(as.yearqtr(date)) %>%
filter(n() > 50) %>%
do(quarter_vola = my_vola_fun(., time_frame, return_period)) %>%
unnest(quarter_vola) %>%
group_by(period) %>%
summarize(djia_vola = mean(djia_vola))
return(data_djia)
}
data_plot_loss <- filter_function(data_djia, gdp_drops, TRUE)
data_plot_no_loss <- filter_function(data_djia, gdp_drops, FALSE)
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, fill = djia_vola, y = djia_vola),
fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5,
aes(x = period, fill = djia_vola, y = djia_vola)) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
guides(colour = guide_legend()) +
theme_classic()
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, fill = djia_vola, y = djia_vola),
fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5,
aes(x = period, fill = djia_vola, y = djia_vola)) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1)))
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, fill = djia_vola, y = djia_vola),
fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5,
aes(x = period, fill = djia_vola, y = djia_vola)) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
guides(fill =  guide_legend()) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, fill = djia_vola, y = djia_vola),
fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5,
aes(x = period, fill = djia_vola, y = djia_vola)) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
guides(fill =  guide_legend(title = "LEFT")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, fill = djia_vola, y = djia_vola)) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, fill = djia_vola, y = djia_vola)) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(name = "", values = c("yellow", "#8DD3C7"), alpha = 0.5) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, fill = djia_vola, y = djia_vola)) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, fill = djia_vola, y = djia_vola)) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(name = "", values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola), fill = djia_vola) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola), fill = djia_vola) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = djia_vola)) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = djia_vola)) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = djia_vola)) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = djia_vola)) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
#scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "djia_vola")) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "djia_vola")) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
#scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "djia_vola")) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "djia_vola")) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
#scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
scale_alpha(value = c(0.5, 0.5)) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "djia_vola")) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "djia_vola")) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
#scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
scale_alpha(values = c(0.5, 0.5)) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "djia_vola"), alpha = 0.5) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "djia_vola"), alpha = 0.5) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
#scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"), alpha = 0.5) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"), alpha = 0.5) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
#scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"), alpha = 0.5) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"), alpha = 0.5) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_color_manual(values = c("yellow", "#8DD3C7")) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"),
color = "yellow", alpha = 0.5) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"), alpha = 0.5) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"),
color = "yellow", alpha = 0.5) +
#fill = "yellow", color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"),
color = "#8DD3C7", alpha = 0.5) +
#fill = "#8DD3C7", color = "#1B9E77", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"),
color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"),
color = "#8DD3C7", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_fill_manual(values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"),
color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"),
color = "#8DD3C7", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_fill_manual(title = "legend", values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"),
color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"),
color = "#8DD3C7", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_fill_manual(name = "legend", values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"),
color = "yellow", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"),
color = "#8DD3C7", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_fill_manual(name = "Legend", values = c("yellow", "#8DD3C7")) +
theme_classic()
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"),
color = "#dcedc1", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"),
color = "#a8e6cf", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_fill_manual(name = "Legend", values = c("#dcedc1", "#a8e6cf")) +
theme_classic()
rm(list = ls())
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
library(DT)
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
?formatPercentage
runApp('carbon_app')
rm(list = ls())
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
djia <- tq_get("DJIA", get = "stock.prices", from = "1930-01-01")
gdp <- tq_get("GDP", get = "economic.data", from = "1930-01-01")
library(shiny)
library(tidyquant)
library(tidyverse)
library(DT)
# should be the same as the vola function in the helpers.R but without progress tracking, so that I can use it easier here
my_vola_fun <- function(data, time_frame, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
if(return_period == "quarterly"){
data <- data %>%
tq_transmute(select = c(date, open, high, low, close, adjusted),
mutate_fun = to.quarterly)
}
if(return_period == "daily"){
data <- data
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = time_frame[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
return_period <- "daily"
data_djia <- djia
data_gdp <- gdp
selected_quantile <- 0.5
time_frame <- c(5:50)
return_period <- "daily"
quantile_analysis <- function(data_gdp){
# returns tibble with GDP quantiles
my_quantiles <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.9, 1)
gdp_quantiles <- data_gdp %>%
tq_mutate(select = price, mutate_fun = quarterlyReturn) %>%
filter(quarterly.returns < 0) %>%
summarize(for_quantile = my_quantiles,
gdp_quantile = quantile(quarterly.returns, probs = my_quantiles))
return(gdp_quantiles %>% rename("GDP loss" = gdp_quantile, "p-quantile" = for_quantile))
}
# same as in the helpers.R but with non-progress tracking volatility function
# careful: quite slow
plot_djia_volatility_separate <- function(data_djia, data_gdp, selected_quantile, time_frame, return_period) {
# calculate GDP quantiles
gdp_quantiles <- quantile_analysis(data_gdp) %>%
rename(gdp_quantile = "GDP loss", for_quantile = "p-quantile")
# find quarters with GDP losses lower than selected quantile
gdp_drops <- data_gdp %>%
tq_mutate(select = price, mutate_fun = quarterlyReturn) %>%
filter(quarterly.returns <= gdp_quantiles %>%
filter(for_quantile == selected_quantile) %>%
pull(gdp_quantile)) %>%
mutate(year_quarter = as.yearqtr(date))
# create two separate data frames for loss and non-loss quarters
filter_function <- function(data_djia, gdp_drops, boolean_in_loss){
data_djia <- data_djia %>%
mutate(in_loss = as.yearqtr(date) %in% gdp_drops$year_quarter) %>%
filter(in_loss == boolean_in_loss) %>%
group_by(as.yearqtr(date)) %>%
filter(n() > 50) %>%
do(quarter_vola = my_vola_fun(., time_frame, return_period)) %>%
unnest(quarter_vola) %>%
group_by(period) %>%
summarize(djia_vola = mean(djia_vola))
return(data_djia)
}
data_plot_loss <- filter_function(data_djia, gdp_drops, TRUE)
data_plot_no_loss <- filter_function(data_djia, gdp_drops, FALSE)
# plot both curves
ggplot() +
geom_area(data = data_plot_loss, aes(x = period, y = djia_vola, fill = "in loss period"),
color = "#dcedc1", alpha = 0.5) +
geom_area(data = data_plot_no_loss, aes(x = period, y = djia_vola, fill = "outside loss period"),
color = "#a8e6cf", alpha = 0.5) +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot_no_loss$djia_vola), max(data_plot_loss$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
scale_fill_manual(name = "Legend", values = c("#dcedc1", "#a8e6cf")) +
theme_classic()
}
plot_djia_volatility_separate(data_djia, data_gdp, selected_quantile, time_frame, return_period)
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
