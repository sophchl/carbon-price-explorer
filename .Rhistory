my_vola_fun <- function(data, time_frame) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = time_frame[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
my_vola_fun2 <- function(data, time_frame) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
data <- data %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = "log")
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <-  runsd(data$daily.returns, k = time_frame[i],
endrule = "NA", align = "center") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
my_vola_fun(djia, c(5:20))
my_vola_fun2(djia, c(5:20))
scenario_data <- scenarios %>%
scenario_prepare() %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L)) %>%
filter(Scenario == "NPi2020_400") %>%
tq_mutate(select = ,
mutate_fun = periodReturn,
period = "daily",
type = mean_type)
my_vola_fun2 <- function(data, time_frame) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
data <- data %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = "log")
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <-  runsd(data$quarterly.returns, k = time_frame[i],
endrule = "NA", align = "center") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
my_vola_fun2(djia, c(5:20))
djia %>% tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = "log")
djia %>% tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = "log")
my_vola_fun2 <- function(data, time_frame) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
data <- data %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = "log")
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <-  runsd(data$quarterly.returns, k = time_frame[i],
endrule = "NA", align = "center") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
my_vola_fun2(djia, c(5:20))
my_vola_fun(djia, c(5:20))
my_vola_fun2 <- function(data, time_frame, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
if(return_period == "quarterly"){
data <- data %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = "log") %>%
mutate("returns" = quarterly.returns)
}
if(return_period == "daily"){
data <- data %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = "log") %>%
mutate("returns" = daily.returns)
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <-  runsd(data$daily.returns, k = time_frame[i],
endrule = "NA", align = "center") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
,y
test = my_vola_fun(djia, c(5:20), "daily")
test = my_vola_fun2(djia, c(5:20), "daily")
test2 = my_vola_fun2(djia, c(5:20), "quarterly")
djia %>% tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = "log") %>%
mutate("returns" = daily.returns)
my_vola_fun2 <- function(data, time_frame, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
if(return_period == "quarterly"){
data <- data %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = "log") %>%
mutate("returns" = quarterly.returns)
}
if(return_period == "daily"){
data <- data %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = "log") %>%
mutate("returns" = daily.returns)
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <-  runsd(data$returns, k = time_frame[i],
endrule = "NA", align = "right") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
rm(test)
test1 <- my_vola_fun2(djia, c(5:20), daily)
test1 <- my_vola_fun2(djia, c(5:20), "daily")
test2 <- my_vola_fun2(djia, c(5:20), "quarterly")
test1
test2
my_vola_fun <- function(data, time_frame, aggregation_period, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
if(return_period == "quarterly"){
data <- data %>%
tq_transmute(select = c(date, open, high, low, close, adjusted),
mutate_fun = to.quarterly)
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = time_frame[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
test3 <- my_vola_fun(djia, c(5:20), "daily")
my_vola_fun <- function(data, time_frame, aggregation_period, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
if(return_period == "quarterly"){
data <- data %>%
tq_transmute(select = c(date, open, high, low, close, adjusted),
mutate_fun = to.quarterly)
}
if(return_period == "daily"){
data <- data
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = time_frame[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
test3 <- my_vola_fun(djia, c(5:20), "daily")
my_vola_fun <- function(data, time_frame, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
if(return_period == "quarterly"){
data <- data %>%
tq_transmute(select = c(date, open, high, low, close, adjusted),
mutate_fun = to.quarterly)
}
if(return_period == "daily"){
data <- data
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = time_frame[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
my_vola_fun <- function(data, time_frame, return_period) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data: stock price data with at least open, high, low, close columns
# input: time_frame: vector that holds the aggregation periods to calculate volatility (format c(start:end))
# output: tibble with period and vola
if(return_period == "quarterly"){
data <- data %>%
tq_transmute(select = c(date, open, high, low, close, adjusted),
mutate_fun = to.quarterly)
}
if(return_period == "daily"){
data <- data
}
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = time_frame[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
test4 <- my_vola_fun(djia, c(5:20), "daily")
test3 <- test4
test4 <- my_vola_fun(djia, c(5:20), "quarterly")
test1
test2
test3
test4
test1
test3
test2
test4
plot_djia_volatility_daily <- function(data, time_frame, return_period) {
# creates a plot of volatility against aggregation period
# input: djia raw data, mean_type ("log"/"arithmetic"), time_frame, return_period: daily or quarterly
# output: ggplot
# note: mean_type does not matter here
data_plot <- data %>%
my_vola_fun(time_frame, return_period)
ggplot(data_plot, aes(x = period, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
#geom_line() +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot$djia_vola), max(data_plot$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
theme_classic()
}
plot_djia_volatility_daily(djia, c(5:20), "daily")
plot_djia_volatility_daily(djia, c(5:20), "quarterly")
plot_djia_volatility <- function(data, time_frame, return_period) {
# creates a plot of volatility against aggregation period
# input: djia raw data, mean_type ("log"/"arithmetic"), time_frame, return_period: daily or quarterly
# output: ggplot
# note: mean_type does not matter here
data_plot <- data %>%
my_vola_fun2(time_frame, return_period)
ggplot(data_plot, aes(x = period, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
#geom_line() +
xlab(paste("aggregation horizon ", "(", return_period, ")", sep = "")) +
ylab("sd DJIA returns") +
coord_cartesian(ylim = c(min(data_plot$djia_vola), max(data_plot$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
theme_classic()
}
plot_djia_volatiliy(djia, c(5:20), "daily")
plot_djia_volatility(djia, c(5:20), "daily")
plot_djia_volaility(djia, c(5:20), "quarterly")
plot_djia_volatility(djia, c(5:20), "quarterly")
rm(list = ls())
runApp('carbon_app')
runApp('carbon_app')
rm(list=ls())
library(shiny)
library(tidyquant)
library(tidyverse)
djia <- tq_get("DJIA", get = "stock.prices", from = "1990-01-01")
gdp <- tq_get("GDP", get = "economic.data", from = "1990-01-01")
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
scenario_data <- scenarios %>%
scenario_prepare() %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L)) %>%
filter(Scenario == "NPi2020_400") %>%
tq_mutate(select = ,
mutate_fun = periodReturn,
period = "daily",
type = mean_type)
source('C:/Users/Sophia/Dropbox/01_studium/04_projects/CarbonPriceExplorer/carbon_app/helpers.R', echo=TRUE)
scenario_data <- scenarios %>%
scenario_prepare() %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L)) %>%
filter(Scenario == "NPi2020_400") %>%
tq_mutate(select = ,
mutate_fun = periodReturn,
period = "daily",
type = mean_type)
scenario_data <- scenarios %>%
scenario_prepare() %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L)) %>%
filter(Scenario == "NPi2020_400") %>%
tq_mutate(select = ,
mutate_fun = periodReturn,
period = "daily",
type = "log")
scenario_data
scenario_data <- scenarios %>%
scenario_prepare() %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L)) %>%
filter(Scenario == "NPi2020_400") %>%
tq_mutate(select = ,
mutate_fun = periodReturn,
period = "quarterly",
type = "log")
scenario_daata
scenario_data
scenario_data <- scenarios %>%
scenario_prepare() %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L)) %>%
filter(Scenario == "NPi2020_400") %>%
tq_mutate(select = value,
mutate_fun = periodReturn,
period = "quarterly",
type = "log")
scenario_data
scenarios %>%
scenario_prepare() %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L)) %>%
filter(Scenario == "NPi2020_400") %>%
tq_mutate(select = value,
mutate_fun = periodReturn,
period = "daily",
type = "log")
scenarios %>%
scenario_prepare() %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L)) %>%
filter(Scenario == "NPi2020_400") %>%
tq_mutate(select = value,
mutate_fun = quarterlyReturn,
type = "log")
runApp('carbon_app')
runApp('carbon_app')
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>% head()
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>% mutate(select = price, mutate_fun = quarterlyReturn)
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>% mutate(select = price,
mutate_fun = quarterlyReturn)
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>% tq_mutate(select = price,
mutate_fun = quarterlyReturn)
(5960-5873)/5873
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>% tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
tq_mutate(select = quarterly.returns,
mutate_fun = quantile)
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
summarize(quantile)
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn)
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>% colQuantiles()
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
quantile()
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
select(quarterly.returns) %>%
quantile()
# alternative: find years with big drops in GDP and see how returns behaved in this period
gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
select(quarterly.returns) %>%
quantile()
gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
select(quarterly.returns)
# alternative: find years with big drops in GDP and see how returns behaved in this period
test <- gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
select(quarterly.returns)
quantiles(test$quarterly.returns)
quantile(test$quarterly.returns)
quantile(test$quarterly.returns, probs = c(0,0.1,0.2,0.3,0.4,0.5))
quantile(test$quarterly.returns, probs = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1))
gdp_quantiles <- quantile(test$quarterly.returns, probs = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1))
gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
filter(quarterly.returns <= gdp_quantiles[2])
gdp_quantiles <- quantile(test$quarterly.returns, probs = c(0,0.05, 0.1))
gdp_quantiles
gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
filter(quarterly.returns <= gdp_quantiles[2])
head(djia)
gdp_drops <- gdp %>%
tq_mutate(select = price,
mutate_fun = quarterlyReturn) %>%
filter(quarterly.returns <= gdp_quantiles[2])
gdp_drops$date
gdp_drops$date[]
gdp_drops$date[1]
gdp_drops$date[1]+20
c(gdp_drops$date[1]:20]
c(gdp_drops$date[1]:20=
c(gdp_drops$date[1]:20)
gdp_drops$date[1]:2
gdp_drops$date[1]
seq(gdp_drops$date[1], length.out = 5)
seq(gdp_drops$date[1], by = "day", length.out = 5)
gdp_drops
dates_gdp_drops1 <- seq(gdp_drops$date[1], by = "day", length.out = 300)
djia %>%
filter(date %in% dates_gdp_drops1)
filtered_djia <- djia %>%
filter(date %in% dates_gdp_drops1)
filtered_djia1 <- djia %>%
filter(date %in% dates_gdp_drops1)
shiny::runApp('carbon_app')
library(shiny)
library(tidyquant)
library(tidyverse)
djia <- tq_get("DJIA", get = "stock.prices", from = "1930-01-01")
gdp <- tq_get("GDP", get = "economic.data", from = "1930-01-01")
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
