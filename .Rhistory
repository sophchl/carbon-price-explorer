get_wd()
getwd()
scenarios <- read.csv(file = "carbon/appdata/cd-links-gdp.csv")
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp.csv")
head(scenarios)
# rename columns to incorporate only year
colnames(scenarios) <- c(colnames(scenarios)[0:5],
substr(colnames(scenarios[6:ncol(scenarios)]), start = 2, stop = 5))
head(scenarios)
scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "year", value = "value", - Scenario) %>%
arrange(Scenario) %>%
mutate(year = as.double(year)) %>%
ggplot(aes(x = year, y = value)) +
geom_line(aes(color = Scenario)) +
labs(x = "year", y = "GDP in billion dollar (2010)") +
theme_classic()
nrow(scenarios)
scenarios
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp.csv")
# prepare scenario data
scenarios <- scenarios %>%
colnames(c(colnames(scenarios)[0:5],
substr(colnames(scenarios[6:ncol(scenarios)]), start = 2, stop = 5))
) %>%
slice(seq_len(nrow(scenarios) - 1))
scenarios <- scenarios %>%
colnames(c(colnames(scenarios)[0:5],
substr(colnames(scenarios[6:ncol(scenarios)]), start = 2, stop = 5))
)
# prepare scenario data
colnames(scenarios) <- c(colnames(scenarios)[0:5],
substr(colnames(scenarios[6:ncol(scenarios)]), start = 2, stop = 5))
scenarios <- scenarios %>% slice(seq_len(nrow(scenarios) - 1))
scenarios
scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "year", value = "value", - Scenario) %>%
arrange(Scenario) %>%
mutate(year = as.double(year)) %>%
ggplot(aes(x = year, y = value)) +
geom_line(aes(color = Scenario)) +
labs(x = "year", y = "GDP in billion dollar (2010)") +
theme_classic()
# prepare scenario data
scenario_prepare <- function(data) {
colnames(data) <- c(colnames(data)[0:5],
substr(colnames(data[6:ncol(data)]), start = 2, stop = 5))
data <- data %>% slice(seq_len(nrow(data) - 1))
return(data)
}
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp.csv")
scenarios <- scenario_prepare(scenarios)
scenarios
rbind(gdp, scenarios)
gdp
scenarios
scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "year", value = "value", - Scenario)
gdp
gdp_data <- gdp %>%
select(-symbol) %>%
gather(key = "year", value = "value")
gdp
gdp_data <- gdp %>%
select(-symbol) %>%
gather(key = "year", value = "value", -date)
gdp_data
gdp_data <- gdp %>%
select(-symbol) %>%
gather(key = "Scenario", value = "value", -date)
gdp_data
gdp_data <- gdp %>%
rename(historic = price) %>%
select(-symbol) %>%
gather(key = "Scenario", value = "value", -date)
gdp_data
scenario_data
scenario_data <- scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "year", value = "value", - Scenario)
scenario_data
scenario_data <- scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario)
gdp_data <- gdp %>%
rename(historic = price) %>%
select(-symbol) %>%
gather(key = "Scenario", value = "value", -date)
rbind(scenario_data, gdp_data)
all_gdp_data <- rbind(scenario_data, gdp_data)
all_gdp_data %>%
ggplot(aes(x = date, y = value)) +
geom_line(aes(color = Scenario))
scenario_data <- scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = as.double(date))
gdp_data <- gdp %>%
rename(historic = price) %>%
select(-symbol) %>%
gather(key = "Scenario", value = "value", -date)
all_gdp_data <- rbind(scenario_data, gdp_data)
all_gdp_data %>%
ggplot(aes(x = date, y = value)) +
geom_line(aes(color = Scenario)) +
labs(x = "year", y = "GDP in billion dollar (2010)") +
theme_classic()
all_gdp_data
gdp_data
gdp_data <- gdp %>%
rename(historic = price) %>%
select(-symbol) %>%
gather(key = "Scenario", value = "value", -date) %>%
mutate(date = as.double(date))
gdp_data
scenario_data <- scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date))
scenario_data <- scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L))
scenario_data
scenario_data <- scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L))
gdp_data <- gdp %>%
rename(historic = price) %>%
select(-symbol) %>%
gather(key = "Scenario", value = "value", -date) %>%
all_gdp_data <- rbind(scenario_data, gdp_data)
scenario_data <- scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L))
gdp_data <- gdp %>%
rename(historic = price) %>%
select(-symbol) %>%
gather(key = "Scenario", value = "value", -date)
all_gdp_data <- rbind(scenario_data, gdp_data)
all_gdp_data
all_gdp_data %>%
ggplot(aes(x = date, y = value)) +
geom_line(aes(color = Scenario)) +
labs(x = "year", y = "GDP in billion dollar") +
theme_classic()
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
# prepare scenario data
scenario_prepare <- function(data) {
colnames(data) <- c(colnames(data)[0:5],
substr(colnames(data[6:ncol(data)]), start = 2, stop = 5))
data <- data %>% slice(seq_len(nrow(data) - 1))
return(data)
}
scenarios <- scenario_prepare(scenarios)
scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "year", value = "value", - Scenario) %>%
arrange(Scenario) %>%
mutate(year = as.double(year)) %>%
ggplot(aes(x = year, y = value)) +
geom_line(aes(color = Scenario)) +
labs(x = "year", y = "GDP in billion dollar (2010)") +
theme_classic()
scenario_data <- scenarios %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L))
gdp_data <- gdp %>%
rename(historic = price) %>%
select(-symbol) %>%
gather(key = "Scenario", value = "value", -date)
all_gdp_data <- rbind(scenario_data, gdp_data)
all_gdp_data %>%
ggplot(aes(x = date, y = value)) +
geom_line(aes(color = Scenario)) +
labs(x = "year", y = "GDP in billion dollar") +
theme_classic()
plot_descriptives_gdp <- function(data_historic, data_scenario) {
data_scenario <- data_scenario %>%
select(-Model, - Region, - Unit, -Variable) %>%
gather(key = "date", value = "value", - Scenario) %>%
mutate(date = ymd(date, truncated = 2L))
data_historic <- data_historic %>%
rename(historic = price) %>%
select(-symbol) %>%
gather(key = "Scenario", value = "value", -date)
data_plot <- rbind(data_scenario, data_historic)
data_plot %>%
ggplot(aes(x = date, y = value)) +
geom_line(aes(color = Scenario)) +
labs(x = "year", y = "GDP in billion dollar") +
theme_classic()
}
plot_descriptives_gdp(gdp, scenarios)
rm(list = ls())
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
plot_descriptives_quarterly <- function(data_stock, mean_type, data_gdp) {
data_djia <- djia_prepare_quarterly(data_stock, mean_type) %>%
select(date, adjusted)
data_gdp <- gdp %>% tq_transmute(mutate_fun = to.quarterly)
data_plot <- left_join(data_gdp, data_djia) %>%
rename("GDP in billion dollar"  = price, "DJIA price" = adjusted) %>%
gather(key = "variable", value = "value", -date)
ggplot(data = data_plot, aes(x = date, y = value, color = variable)) +
geom_line() +
theme_classic() +
scale_color_manual(values = c("#1B9E77", "#7570B3"))
}
plot_descriptives_quarterly(djia, "arithmetic", gdp)
djia_prepare_daily <- function(data, mean_type)  {
# prepares djia data for daily analysis
# input: djia as loaded by tidyquant, mean_type: "arithmetic" or "log"
# output: djia with: date (ymd), open, high, low, close, volume, adjusted, daily.return
data_out <- data %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = mean_type)  %>%
mutate(date = ymd(date))  %>%
select(-symbol)
return(data_out)
}
djia_prepare_daily(djia, "log")
djia <- tq_get("DJIA", get = "stock.prices", from = "1990-01-01")
rm(list = ls())
djia <- tq_get("DJIA", get = "stock.prices", from = "1990-01-01")
gdp <- tq_get("GDP", get = "economic.data", from = "1990-01-01")
scenarios <- read.csv(file = "data/cd-links-gdp-us.csv")
runApp('carbon_app')
rm(list = ls())
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
rm(list = ls())
runApp('carbon_app')
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
head(scenarios)
# prepare scenario data
scenario_prepare <- function(data) {
colnames(data) <- c(colnames(data)[0:5],
substr(colnames(data[6:ncol(data)]), start = 2, stop = 5))
data <- data %>% slice(seq_len(nrow(data) - 1))
return(data)
}
scenarios <- scenario_prepare(scenarios)
scenarios
rm(list = ls())
runApp('carbon_app')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='sophchl', token='DFCF950EF81920C3EEE23283BAA0AF1C', secret='NHxKVSCxLkKte34wsmeVJtXXrBVau7H/llq2+C6k')
rsconnect::deployApp('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app')
shiny::runApp('carbon_app')
runApp('carbon_app')
rsconnect::deployApp('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
runApp('carbon_app')
# add data in every step
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = vector_days[i], calc = "close") %>%
mean(na.rm = T)
runApp('carbon_app')
library(shiny)
library(tidyquant)
library(tidyverse)
djia <- tq_get("DJIA", get = "stock.prices", from = "1990-01-01")
gdp <- tq_get("GDP", get = "economic.data", from = "1990-01-01")
scenarios <- read.csv(file = "data/cd-links-gdp-us.csv")
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
djia_prepare_daily <- function(data, mean_type)  {
# prepares djia data for daily analysis
# input: djia as loaded by tidyquant, mean_type: "arithmetic" or "log"
# output: djia with: date (ymd), open, high, low, close, volume, adjusted, daily.return
data_out <- data %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = mean_type)  %>%
mutate(date = ymd(date))  %>%
select(-symbol)
return(data_out)
}
djia_daily <- djia_prepare_daily(djia, "arithmetic")
head(djia_daily)
djia_prepare_quarterly <- function(data, mean_type)  {
# prepares djia data for daily analysis
# input: djia as loaded by tidyquant, mean_type: "arithmetic" or "log"
# output: djia with: date (ymd), open, high, low, close, volume, adjusted, daily.return
data_out <- data %>%
mutate(date = ymd(date)) %>%
tq_transmute(select = c(date, open, high, low, close, volume, adjusted),
mutate_fun = to.quarterly
) %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = mean_type)
return(data_out)
}
djia_quarterly <- djia_prepare_quarterly(djia, "arithmetic")
head(djia_quarterly$quarterly.returns)
djia_quarterly2 <- djia %>%  tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = mean_type)
djia_quarterly2 <- djia %>%  tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "quarterly",
type = "arithmetic")
head(djia_quarterly2)
rm(list = ls())
library(shiny)
library(tidyquant)
library(tidyverse)
djia <- tq_get("DJIA", get = "stock.prices", from = "1990-01-01")
gdp <- tq_get("GDP", get = "economic.data", from = "1990-01-01")
scenarios <- read.csv(file = "data/cd-links-gdp-us.csv")
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
djia_prepare_daily <- function(data, mean_type)  {
# prepares djia data for daily analysis
# input: djia as loaded by tidyquant, mean_type: "arithmetic" or "log"
# output: djia with: date (ymd), open, high, low, close, volume, adjusted, daily.return
data_out <- data %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = mean_type)  %>%
mutate(date = ymd(date))  %>%
select(-symbol)
return(data_out)
}
djia_daily <- djia_prepare_daily(djia, "arithmetic")
my_vola_fun <- function(data, vector_days) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data, vector that holds the aggregation periods to calculate volatility for
# output: tibble with period and vola
vola_vector <- c()
for (i in seq_along(vector_days)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = vector_days[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- data %>% summarise(period = vector_days,
djia_vola = vola_vector)
return(vola_data)
}
plot_djia_volatility_daily <- function(data, mean_type, time_frame) {
# creates a plot of volatility against aggregation period
# input: djia raw data, mean_type, time_frame
# output: ggplot
data_plot <- data %>%
djia_prepare_daily(mean_type) %>%
my_vola_fun(time_frame)
ggplot(data_plot, aes(x = period, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
#geom_line() +
xlab("aggregation horizon") +
ylab("DJIA volatility") +
coord_cartesian(ylim = c(min(data_plot$djia_vola), max(data_plot$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
theme_classic()
}
plot_djia_volatility_daily(djia, "arithmetic", c(5:100))
data_plot <- data %>%
tq_transmute(select = date, open, high, low, close,
mutate_fun = to.period) %>%
my_vola_fun(c(5:100))
data_plot <- data %>%
tq_transmute(select = date, open, high, low, close,
mutate_fun = to.quarterly) %>%
my_vola_fun(c(5:100))
data_plot <- data %>%
tq_transmute(select = c(date, open, high, low, close),
mutate_fun = to.quarterly) %>%
my_vola_fun(c(5:100))
data_plot <- djia %>%
tq_transmute(select = c(date, open, high, low, close),
mutate_fun = to.quarterly) %>%
my_vola_fun(c(5:100))
head(data_plot)
ggplot(data_plot, aes(x = period, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
#geom_line() +
xlab("aggregation horizon") +
ylab("DJIA volatility") +
coord_cartesian(ylim = c(min(data_plot$djia_vola), max(data_plot$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
theme_classic()
time_frame = c(5:20)
data = djia
data_plot <- data %>%
tq_transmute(select = c(date, open, high, low, close),
mutate_fun = to.quarterly) %>%
my_vola_fun(time_frame)
ggplot(data_plot, aes(x = period, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
#geom_line() +
xlab("aggregation horizon") +
ylab("DJIA volatility") +
coord_cartesian(ylim = c(min(data_plot$djia_vola), max(data_plot$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
theme_classic()
data %>%
tq_transmute(select = c(date, open, high, low, close),
mutate_fun = to.quarterly)
time_frame = c(5:100)
data_plot <- data %>%
tq_transmute(select = c(date, open, high, low, close),
mutate_fun = to.quarterly) %>%
my_vola_fun(time_frame)
ggplot(data_plot, aes(x = period, fill = djia_vola, y = djia_vola)) +
geom_area(fill = "#8DD3C7", color = "#1B9E77") +
#geom_line() +
xlab("aggregation horizon") +
ylab("DJIA volatility") +
coord_cartesian(ylim = c(min(data_plot$djia_vola), max(data_plot$djia_vola)),
xlim = c(time_frame[1], tail(time_frame,1))) +
theme_classic()
runApp('carbon_app')
runApp('carbon_app')
rm(list = ls())
library(shiny)
library(tidyquant)
library(tidyverse)
djia <- tq_get("DJIA", get = "stock.prices", from = "1990-01-01")
gdp <- tq_get("GDP", get = "economic.data", from = "1990-01-01")
scenarios <- read.csv(file = "carbon_app/data/cd-links-gdp-us.csv")
djia_prepare_daily <- function(data, mean_type)  {
# prepares djia data for daily analysis
# input: djia as loaded by tidyquant, mean_type: "arithmetic" or "log"
# output: djia with: date (ymd), open, high, low, close, volume, adjusted, daily.return
data_out <- data %>%
tq_mutate(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
type = mean_type)  %>%
mutate(date = ymd(date))  %>%
select(-symbol)
return(data_out)
}
my_vola_fun <- function(data, vector_days) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data, vector that holds the aggregation periods to calculate volatility for
# output: tibble with period and vola
vola_vector <- c()
for (i in seq_along(vector_days)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = vector_days[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- data %>% summarise(period = vector_days,
djia_vola = vola_vector)
return(vola_data)
}
my_vola_fun <- function(data, vector_days) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data, vector that holds the aggregation periods to calculate volatility for
# output: tibble with period and vola
vola_vector <- c()
for (i in seq_along(vector_days)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = vector_days[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- data %>% summarise(period = vector_days,
djia_vola = vola_vector)
return(vola_data)
}
djia_daily <- djia_prepare_daily(djia, "arithmetic")
mean_type = "arithmetic"
time_frame = c(5:100)
djia_vola <- my_vola_fun(djia, time_frame)
head(djia_vola)
my_vola_fun <- function(data, time_frame) {
# calculates volatility for a vector of days (loop so not super fast)
# input: data, vector that holds the aggregation periods to calculate volatility for
# output: tibble with period and vola
vola_vector <- c()
for (i in seq_along(time_frame)){
return_vola <- volatility(data[, c("open", "high", "low", "close")],
n = time_frame[i], calc = "close") %>%
mean(na.rm = T)
vola_vector[i] <- return_vola
}
vola_data <- tibble(period = time_frame,
djia_vola = vola_vector)
return(vola_data)
}
head(djia_vola)
djia_vola <- my_vola_fun(djia, time_frame)
head(djia_vola)
?volatility
runApp('carbon_app')
library(rsconnect)
rsconnect::deployApp( local_path_of_your_app )
rsconnect::deployApp('C:/Users/Sophia/Dropbox/01_Studium/04_projects/CarbonPriceExplorer/carbon_app')
